#
#
#
http {

	#
	# Servers listed here will automatically be started and stopped by the bootstrap/teardown mechanism.
	#
	startup-servers = [
	
		# plain.http.default-server			
		
		# plain.http.monitor-server
	
	]

	#
	# If nothing else is configured this default http server will be started by the bootstrap mechanism.
	#		
	default-server {

		#
		# Used to identify the server in logging, for instance.
		#		
		display-name = default
		
		#
		# The name of the rest-dispatcher that handles requests and responses on this http server.
		# The default-dispatcher is not really doing a lot except answering 501.
		#
		dispatcher = plain.rest.default-dispatcher
	
		#
		# Valid values are: "localhost" or "127.0.0.1" or "*" (binds to all local interfaces) or an ip-address of one local interface.
		# "*" does not work equally well on all OS platforms (eg. Linux), it is then best to specify an ip-address directly.
		# Do not forget to put the value in quotes ("") except for localhost. 
		# If a server is bound to a "real" ip-address, you must bind another server to "127.0.0.1" for loop-back, as localhost now points to the "real" ip-address.
		# On OSX 127.0.0.1 is much faster than localhost (for benchmarking).
		#
		address = "*"

		#
		# List all ports you want your server accept connections on. The first port will become the 'load-balancing-port' if load-balancing is enabled.
		# Listing more ports than the number-of-cores - 1 will cause an exception as this would degrade performance drastically. 
		# A reasonable value will be around 1/5 of number-of-cores. The ports need not to be sorted in any order. Duplicates will lead to bind exceptions.
		#
		# Do not forget commas between the port values or they will be interpreted as one string.
		#
		port-range = [ 7500 ] ## , 7501, 7502 ]
	
		#
		# This value should be close to number of simultaneous connections that you expect at peaks.
		#
		backlog = 10000
		
		#
		# On powerful multi-core hardware it could be a bottleneck to accept connections on only one port. Therefore, you can
		# enable load-balancing by listing a port-range with more than one port. By default, the first element of the range
		# will become 'the load-balancing port'. It will respond with a Redirection http response to one of the other ports in the range.
		# Optionally, you can specify the path of the load-balancing mechanism (default: "/") and the path to which clients will 
		# be redirected to (also default: "/"). 
		#				
		load-balancing {
		
			#
			# Setting this to 'on' is only allowed for a port-range with a size > 1. Setting it 'off' for such a port-range will issue a warning on bootstrap.
			#
			enable = off
			
			#
			# Path on which the load-balancing mechanism is implemented.
			#
			balancing-path = /
			
			#
			# Path clients will be redirected to on one of the non-balancing ports of the port-range.
			#
			redirection-path = /
			
		}
		
		#
		# If not overwritten inside a server configuration this will be the default for all servers.
		#
		feature {
		
			#
			# Set this value to a duration (e.g. 500 milliseconds) if you want to block a server against denial of service attacks.
			# For instance, the monitor-server has a pause-between-accept = 500 ms because calling a monitor resource can become extremely expensive
			# and calling it in loops can bring the JVM to a stand-still.
			# Please be aware: Do not set this value to anything > 0 on your API servers, here you want maximum performance.
			# Mixing a positive number for this value with a port-range with load-balancing will through an exception on bootstrap.
			#
			pause-between-accepts = 0

			#
			# Allow some broken tools to request with version 1.0, but treat the request as if it is version 1.1. Apache benchmark 'ab' is such a f/tool.
			#
			# Careful: Do not put dots (".") into key names, not even in quoted strings.
			#
			allow-version-1-0-but-treat-it-like-1-1 = on
		
			#
			# Enable this feature to allow any (even future) versions, but treat them like version 1.1, of course this might fail due to subsequent protocol errors.
			#
			allow-any-version-but-treat-it-like-1-1 = off
			
			#
			# Setting the default character set to US-ASCII might give a small performance gain. 
			# Names must be valid for java.nio.charset.Charset.forName(). If not specified it defaults to ISO-8859-15.
			#
			default-character-set = ISO-8859-15
			
			#
			# If you are absolutely sure that your http request do not contain url-encoded strings this value can be set to true. This avoids calls to URLDecoder which might result in a performance benefit.  
			# The query part of the request URI will always be url-decoded.
			#
			disable-url-decoding = off
			
			#
			# The maximum size of an http request entity (POST, PUT, GET-query) that is processed as a whole and forwarded to the method handler converted to the desired type.
			# If this size is exceeded the raw channel is given to a method implementation expecting a channel. If this method doesn't exist the server responds with 501.
			#
			max-entity-buffer-size = 64K
			
		}

	}
	
	#
	# What's not specified a <my-own-name>-server will inherit from the configuration of the default-server.
	#
	servlet-server {
	
		display-name = servlet
		
		dispatcher = plain.servlet.servlet-dispatcher

		port-range = [ 7080 ]
		
		load-balancing.enable = off
		
	}
	
	#
	# What's not specified a <my-own-name>-server will inherit from the configuration of the default-server.
	#
	monitor-server {
	
		display-name = monitor
		
		dispatcher = plain.rest.monitor-dispatcher

		address = localhost

		port-range = [ 5757 ]
		
		backlog = 1
		
		load-balancing.enable = off
		
		feature {
		
			#
			# We do not allow the monitor-server to be called so often as its methods can become very expensive.
			#
			pause-between-accepts = 200
			
		}
	
	}
	
	#
	# Define your own <my-name>-server in the application.conf or overwrite the default-server.
	#
	
}

